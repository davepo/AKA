/*
Project: AKA Triage Suite
Sub-Project: AKA Triage Tool
Component: Status Tracker
Purpose:	This script tracks the operational status
			of the various components run by the main 
			tool.
Supporting tool: Encase
Supporting URL: https://opentext.com
Developer: Dave Posocco

*/

class StatusTrackerClass {
	
	static SnapshotClass snap;
	
	static String status_hsh, 
				status_idx, 
				status_rcv, 
				status_cln,
				status_texp,
				status_ext
				;
	
	StatusTrackerClass():
		status_hsh = "Idle",
		status_idx = "Idle",
		status_rcv = "Idle",
		status_cln = "Idle",
		status_texp = "Idle",
		status_ext = "Idle",
		snap = new SnapshotClass()
		
	{
	}
	
	void setHashStatus(const String &  a) {
		status_hsh = a;
	}
	
	void setIndexStatus(const String &  a) {
		status_idx = a;
	}
	
	void setRecoverStatus(const String &  a) {
		status_rcv = a;
	}
	
	void setCleanupStatus(const String &  a) {
		status_cln = a;
	}
	
	void setTriageExportStatus(const String &  a) {
		status_texp = a;
	}
	
	void setExternalToolStatus(const String & a) {
		status_ext = a;
	}
	
	
	static bool getHashStatus() {
		if (status_hsh.Contains("Starting") || status_hsh.Contains("Running")){
			return true;} else {return false;}
	}
	
	static bool getIndexStatus() {
		if (status_idx.Contains("Starting") || status_idx.Contains("Running")){
			return true;} else {return false;}
	}
	
	static bool getRecoverStatus() {
		if (status_rcv.Contains("Starting") || status_rcv.Contains("Running")){
			return true;} else {return false;}
	}
	
	static bool getCleanupStatus() {
		if (status_cln.Contains("Starting") || status_cln.Contains("Running")){
			return true;} else {return false;}
	}
	
	static bool getTriageExportStatus() {
		if (status_texp.Contains("Starting") || status_texp.Contains("Running")){
			return true;} else {return false;}
	}
	
	static bool getExternalToolStatus() {
		if (status_ext.Contains("Starting") || status_ext.Contains("Running")){
			return true;} else {return false;}
	}


	static bool CheckExternalToolStatus() {
		LocalMachine.ReadSnapshot(snap, ConnectionClass::SNAPSHOT);
		forall (ProcessClass i in snap.ProcessRoot()) {
			if (!i.IsFolder()) {
				if (i.Name().Contains("ruby")){
					return true;
				}
			}
		}
		return false;
	}
	
	void getStatus() {
		displayStatus(status_hsh, 
				status_idx, 
				status_rcv, 
				status_cln,
				status_texp,
				status_ext);
	}
	
	String getStatusString() {
		return displayStatusString(status_hsh, 
				status_idx, 
				status_rcv, 
				status_cln,
				status_texp,
				status_ext);
	}
	
	void displayStatus(const String & h,
						const String & i, 
						const String & r, 
						const String & c, 
						const String & t,
						const String & e
						){
		String aka = "**********AKA Triage Tool for Encase**********\n\n";
		String warn = "\n\nPlease wait patiently.  A dialog will appear when all tasks are complete.";
		SystemClass::ClearConsole(SystemClass::SHOWCONSOLE);
		Console.WriteLine(aka+displayStatusString(h,i,r,c,t,e)+warn);
	}
	
	String displayStatusString(const String & h,
						const String & i, 
						const String & r, 
						const String & c, 
						const String & t,
						const String & e
						){
		
		String hsh = 	"  (Encase) Hashing: " + h + "\n";
		String idx = 	"  (Encase)Indexing: " + i + "\n";
		String rcv = 	"  (Encase) Recovering: " + r + "\n";
		String cln = 	"  Cleanup: " + c + "\n";
		String texp = 	"  Triage Export: " + t + "\n";
		String ext = 	"  External tools: " + e + "\n";
		

		return (texp+cln+ext+hsh+idx+rcv);
	}
		
}
