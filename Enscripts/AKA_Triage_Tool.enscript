/*
Project: AKA Triage Suite
Sub-Project: AKA Triage Tool
Component: AKA main tool
Purpose:	This class is used to identify and export 
			various files, launch eexternal programs, 
			log its activities, and provide user feedback.
Supporting tool: Encase
Supporting URL: https://opentext.com
Developer: Dave Posocco

*/

//SystemClass::Message(SystemClass::ICONINFORMATION,"Debug","Debug - ");

include "LoggingUtils"
include "MainDialogClass"
include "StatusTrackerClass"
include "ExternalTools"
include "ProcessingClasses"
include "MiscClass"
include "AKAStatusBarClass"

class MainClass;

//MAIN CLASS
class MainClass  {
	
  typedef String[] StringAr;

  //Options booleans

  static bool enableEvidenceIndexing = false;
  static bool enableEvidenceHashing = false;
  static bool enableEvidenceRecover = false;
  static bool enableTriageExport = false;
  static bool enableExternalTools = false;

  // Dialog variables
  
  static bool indexOnOff, triageOnOff, hashOnOff, recoverOnOff, externalToolsOnOff;
  
  void Main(CaseClass c) {

		hashOnOff = false;
		indexOnOff = false;
		recoverOnOff = false;
		triageOnOff = true;
		externalToolsOnOff = true;

		MainDialogLauncher diag(null, this);
		int wiz = diag.Wizard();
		
		StatusTrackerClass status_tracker = new StatusTrackerClass(); 
		
		LoggingUtils log(c, c.ExportFolder()+"\\AKA_Export\\AKA_Export_log.log", SystemClass::ScriptPath().GetFilePath() + "\\tracker.log");
		
		ConnectionClass conn = LocalMachine;
		
		EvHashThreadClass hashThread;
		EvIdxThreadClass indexThread;
		EvRecThreadClass recoverThread;
		MiscClass exportAndCleanup();
		StatBarClass bar();

		//Initiate Status Bar
		bar.SetInitStatBar();
		
		//Determine if output path already exists
		bool aka_path_available = true;
		if (conn.PathExists(c.ExportFolder()+"\\AKA_Export")) {
			aka_path_available = false;
		}
		

		if (wiz == SystemClass::OK && wiz == 1 && ((aka_path_available && triageOnOff) || triageOnOff == 0)) {
			
			SystemClass::Message(SystemClass::ICONINFORMATION, "Artificial Kyle Anderson", "Hello.\nMy name is Kyle.\nI am going to do some work to make your tasking easier.\nPlease be patient and pay attention to the console.\nI'll let you know when I'm done!");
	
			enableEvidenceHashing = hashOnOff;
			enableEvidenceIndexing = indexOnOff;
			enableEvidenceRecover = recoverOnOff;
			enableTriageExport = triageOnOff;
			enableExternalTools = externalToolsOnOff;

			if (enableEvidenceHashing) {
				status_tracker.setHashStatus("Enabled - Idle");
			} else {
				status_tracker.setHashStatus("Disabled");
			}
			if (enableEvidenceIndexing) {
				status_tracker.setIndexStatus("Enabled - Idle");
			} else {
				status_tracker.setIndexStatus("Disabled");
			}
			if (enableEvidenceRecover) {
				status_tracker.setRecoverStatus("Enabled - Idle");
			} else {
				status_tracker.setRecoverStatus("Disabled");
			}
			if (enableTriageExport) {
				status_tracker.setTriageExportStatus("Enabled - Idle");
			} else {
				status_tracker.setTriageExportStatus("Disabled");
			}
			if (enableExternalTools) {
				status_tracker.setExternalToolStatus("Enabled - Idle");
			} else {
				status_tracker.setExternalToolStatus("Disabled");
			}

			SystemClass::Message(SystemClass::ICONINFORMATION, "Artificial Kyle Anderson ", "I'm going to start doing stuff now...\n\nI'll try not to \"bog it down\"\n\n :\)");
			
			//Satus
			status_tracker.getStatus();

			//Update tracker
			log.appendTracker();

			//Export path variables
			String evt_path;
			String reg_file_path;
			String av_path_mc;
			String av_path_sym;
			String mft_path;
			String usb_path;
			String suspicious_path;
			String prefetch_files_path;
			String wbem_path;
			String thumbcache_path;
			String lnk_path;
			String jumplist_path;

			conn.CreateFolder(c.ExportFolder()+"\\AKA_Export");


			String drive;
			String disk;
			drive = "";
			disk = "";
			
			//400 slots for tracking the export paths.  This is needed for running external tools against exported files
			StringAr aka_export_paths(0, 400);

			//Update Status Bar
			bar.UpdateStatBar(1);
			
			//Start of triage file export.  This must be enabled in order to run external tools.
			if (enableTriageExport) {
				/// Start of Logic ///
				//Satus
				status_tracker.setTriageExportStatus("Enabled - Running");
				status_tracker.getStatus();
				for(ItemIteratorClass i(c, ItemIteratorClass::NORECURSE+ItemIteratorClass::NOEPRECORDS, ALL); EntryClass entry = i.GetNextEntry();) {
						
						
						if (entry.GetVolume() != null) {
							if ( (drive != entry.GetVolume().Name() || disk != entry.EvidenceFile()) && (VolumeClass::FileSystems::SourceText(entry.GetVolume().GetFileSystem()) != "LOGICAL" ) ) {
								//Specifier for current volume root letter
								drive = entry.GetVolume().Name();
								disk = entry.EvidenceFile();
								
								//Sets path were results will be stored.
								evt_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\"+"Event_Logs\\";
								reg_file_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\"+"Registry_Files\\";
								av_path_mc = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\"+"AV_Logs\\McAfee\\";
								av_path_sym = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\"+"AV_Logs\\Symantec\\";
								mft_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\"+"MFT\\";
								usb_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\"+"USB\\";
								suspicious_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\"+"Suspicious_Files\\";
								prefetch_files_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\"+"Prefetch\\";
								wbem_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\WBEM_Repository\\";
								thumbcache_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\Thumbcache_Files\\";
								lnk_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\User_LNK_Files\\";
								jumplist_path = c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\User_Jumplist_Files\\";
																				
								//Create the output directories, if they dont already exist
								conn.CreateFolder(c.ExportFolder()+"\\AKA_Export\\"+disk);
								conn.CreateFolder(c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive);
								conn.CreateFolder(mft_path.SubString(0,mft_path.GetLength()-1));
								conn.CreateFolder(evt_path.SubString(0,evt_path.GetLength()-1));
								conn.CreateFolder(reg_file_path.SubString(0,reg_file_path.GetLength()-1));
								conn.CreateFolder(c.ExportFolder()+"\\AKA_Export\\"+disk+"\\"+drive+"\\"+"AV_Logs");
								conn.CreateFolder(av_path_mc.SubString(0,av_path_mc.GetLength()-1));
								conn.CreateFolder(av_path_sym.SubString(0,av_path_sym.GetLength()-1));
								conn.CreateFolder(usb_path.SubString(0,usb_path.GetLength()-1));
								conn.CreateFolder(suspicious_path.SubString(0,suspicious_path.GetLength()-1));
								conn.CreateFolder(prefetch_files_path.SubString(0,prefetch_files_path.GetLength()-1));
								conn.CreateFolder(wbem_path.SubString(0,wbem_path.GetLength()-1));
								conn.CreateFolder(thumbcache_path.SubString(0,thumbcache_path.GetLength()-1));
								conn.CreateFolder(lnk_path.SubString(0,lnk_path.GetLength()-1));
								conn.CreateFolder(jumplist_path.SubString(0,jumplist_path.GetLength()-1));
								
								//Add all paths to the path tracking array
								aka_export_paths.Add(evt_path);
								aka_export_paths.Add(reg_file_path);
								aka_export_paths.Add(av_path_mc);
								aka_export_paths.Add(av_path_sym);
								aka_export_paths.Add(mft_path);
								aka_export_paths.Add(usb_path);
								aka_export_paths.Add(suspicious_path);
								aka_export_paths.Add(prefetch_files_path);
								aka_export_paths.Add(wbem_path);
								aka_export_paths.Add(thumbcache_path);
								aka_export_paths.Add(lnk_path);
								aka_export_paths.Add(jumplist_path);
																
							}
						}			

						if (!entry.IsFolder() && entry.GetVolume() != null){
							
							String entry_name = entry.Name();
							String entry_true_path = entry.TruePath();
							String lowcase_drive = drive;

							lowcase_drive.ToLower();
							entry_name.ToLower();
							entry_true_path.ToLower();
							

							//Export and parse the mft
							if (entry_name == "$mft") {
								if (enableTriageExport) {
									exportAndCleanup.exportFile(entry, mft_path, log, triageOnOff);								
								}
								log.entryEnd();
							}
						
							//Check for any unorthodoxed svchost.exe occurances
							if (entry_name == "svchost.exe" && !entry_true_path.Contains(lowcase_drive+"\\windows\\system32") && !entry_true_path.Contains("syswow64") && !entry_true_path.Contains("_microsoft-windows-") && !entry_true_path.Contains(lowcase_drive+"\\winnt\\system32")){
								exportAndCleanup.exportFile(entry, suspicious_path, log, triageOnOff);
								log.entryEnd();
							}
							
							//Check for any unorthodoxed explorer.exe occurances
							if (entry_name == "explorer.exe" && !entry_true_path.Contains(lowcase_drive+"\\windows\\") && !entry_true_path.Contains("syswow64") && !entry_true_path.Contains("_microsoft-windows-") && !entry_true_path.Contains(lowcase_drive+"\\winnt\\")) {
								exportAndCleanup.exportFile(entry, suspicious_path, log, triageOnOff);
								log.entryEnd();
							}
							
							///////////////Windows folder items
							if (entry_true_path.Contains(lowcase_drive+"\\windows\\") || entry_true_path.Contains(lowcase_drive+"\\winnt\\")){
								// System32
								if (entry_true_path.Contains("\\windows\\system32") || entry_true_path.Contains("\\windows\\appcompat")){
									//Check if files in System32 (event logs and registry files)
									if ((entry_true_path.Contains("\\config") && !entry_true_path.Contains("regback")) || entry_true_path.Contains("\\windows\\appcompat\\programs")){
										//Main registry files and amcache
										if (entry_name == "system" || entry_name == "software" || entry_name == "security" || entry_name == "sam" || entry_name == "amcache.hve"){
											exportAndCleanup.exportFile(entry, reg_file_path, log, triageOnOff);
											//status_tracker.getStatus();
											log.entryEnd();
											// Windows XP event logs
										} else if ((entry_name.Contains("sec") || entry_name.Contains("sys") || entry_name.Contains("app")) && entry_name.Contains(".evt")) {
											exportAndCleanup.exportFile(entry, evt_path, log, triageOnOff);
											log.entryEnd();
											//Try and get security archives, if they meet specific criteria
										} else if (entry_name.Contains("archive") && entry_name.Contains("sec") && entry_name.Contains(".evt")) {
											exportAndCleanup.exportFile(entry, evt_path, log, triageOnOff);	
											log.entryEnd();
										} 	
										//Windows 7+ event logs
									} else if (entry_true_path.Contains("\\winevt\\logs")) { 
										if (entry_name.Contains(".evtx")){
											//USB related event logs
											if (entry.Name() == "Microsoft-Windows-DriverFrameworks-UserMode%4Operational.evtx" || entry.Name() == "Microsoft-Windows-Kernel-PnP%4Configuration.evtx" || entry.Name() == "Microsoft-Windows-Kernel-ShimEngine%4Operational.evtx") {
												exportAndCleanup.exportFile(entry, usb_path, log, triageOnOff);
											} else {
											// All others specified
											exportAndCleanup.exportFile(entry, evt_path, log, triageOnOff);
											}
											log.entryEnd();
											//Try and get security archives, if they meet specific criteria
										} else if (entry_name.Contains("archive") && entry_name.Contains("sec") && entry_name.Contains(".evtx")) {
											exportAndCleanup.exportFile(entry, evt_path, log, triageOnOff);	
											log.entryEnd();
										} 				
									} else if (entry_true_path.Contains("\\wbem\\repository")) { 										
										// All others specified
										exportAndCleanup.exportFile(entry, wbem_path, log, triageOnOff);
										log.entryEnd();														
									}
									//Setup api files
								} else if (entry_true_path.Contains("\\windows\\inf")) {
									if (entry_name.Contains("setupapi") && entry_name.Contains("log")){
										exportAndCleanup.exportFile(entry, usb_path, log, triageOnOff);
										log.entryEnd();
									} 
									//Prefetch files
								} else if (entry_true_path.Contains("\\windows\\prefetch")) {
									if (entry.Name().Contains(".pf")){
										exportAndCleanup.exportFile(entry, prefetch_files_path, log, triageOnOff);
										log.entryEnd();
									}
								}

								///////////////User folder items/////////////////////
							} else if (entry_true_path.Contains(lowcase_drive+"\\users\\") || entry_true_path.Contains(lowcase_drive+"\\documents and settings\\")) { 
								
								// NTUSER.DAT
								if (entry_name == "ntuser.dat"){
									exportAndCleanup.exportFile(entry, reg_file_path, log, triageOnOff);
									//status_tracker.getStatus();
									log.entryEnd();	
								//USRCLASS.DAT (7+ only)
								} else if (entry_name == "usrclass.dat") {
									exportAndCleanup.exportFile(entry, reg_file_path, log, triageOnOff);
									//status_tracker.getStatus();
									log.entryEnd();	
								} else if (entry_true_path.Contains("\\documents and settings\\all users\\application data")) {
									//AV Log files
									if (entry_true_path.Contains("mcafee")) {
										if (entry_name.Contains(".txt") || entry_name.Contains(".log")){
											exportAndCleanup.exportFile(entry, av_path_mc, log, triageOnOff);
											log.entryEnd();	
										}
									} else if (entry_true_path.Contains("symantec")) {
										if (entry_name.Contains(".txt") || entry_name.Contains(".log")){
											exportAndCleanup.exportFile(entry, av_path_sym, log, triageOnOff);
											log.entryEnd();
										}
									}
									//Thumbcache Files
								} else if (entry_name.Contains("thumbcache_")) {
									exportAndCleanup.exportFile(entry, thumbcache_path, log, triageOnOff);
									log.entryEnd();
									//LNK files
								} else if (entry_name.Contains(".lnk")) {
									exportAndCleanup.exportFile(entry, lnk_path, log, triageOnOff);
									log.entryEnd();
								} else if (entry_name.Contains("automaticdestinations-ms") || entry_name.Contains("customdestinations-ms")) {
									exportAndCleanup.exportFile(entry, jumplist_path, log, triageOnOff);
									log.entryEnd();
								}
								///////////////Program Data///////////////////////////////
							} else if (entry_true_path.Contains(lowcase_drive+"\\programdata\\")) { 
																
								//AV log files
								if (entry_true_path.Contains("mcafee")) {
									if (entry_name.Contains(".txt") || entry_name.Contains(".log")){
										exportAndCleanup.exportFile(entry, av_path_mc, log, triageOnOff);
										log.entryEnd();	
									}
								} else if (entry_true_path.Contains("symantec")) {
									if (entry_name.Contains(".txt") || entry_name.Contains(".log")){
										exportAndCleanup.exportFile(entry, av_path_sym, log, triageOnOff);
										log.entryEnd();
									}
								}
							} 
						}
					}
				/// End of Logic ///
				
				status_tracker.setTriageExportStatus("Enabled - Complete");
				//Update Status Bar
				bar.UpdateStatBar(2);
				status_tracker.getStatus();
					
				//Clean up exported empty event logs and remove empty folders
				exportAndCleanup.cleanupEvtLogs(evt_path);
				
				if (exportAndCleanup.cleanup(c.ExportFolder())) {
				status_tracker.setCleanupStatus("Enabled - Complete");
				} else {
					status_tracker.setCleanupStatus("Enabled - Failed");
				}
				
				status_tracker.getStatus();
				
				//Run external tools
				if (enableExternalTools) {
					ToolExecutionThread RunAllTheTools(c, log, c.ExportFolder()+"\\AKA_Export\\", aka_export_paths, status_tracker);
					RunAllTheTools.Run();
					//Update Status Bar
					bar.UpdateStatBar(3);
					status_tracker.getStatus();
				}
								
			}
						
			
			//Check on external tools
			if(!status_tracker.CheckExternalToolStatus()){
				status_tracker.setExternalToolStatus("Complete");
			}
			status_tracker.getStatus();
			
			//Start hashing
			if (enableEvidenceHashing){
				hashThread = new EvHashThreadClass(c, status_tracker);
				hashThread.Run();
			}
			//Update Status Bar
			bar.UpdateStatBar(4);
			status_tracker.getStatus();
						
			//Check on external tools
			if(!status_tracker.CheckExternalToolStatus()){
				status_tracker.setExternalToolStatus("Complete");
			}
			//Update Status Bar
			bar.UpdateStatBar(5);
			status_tracker.getStatus();
			
			//Start folder recovery
			if (enableEvidenceRecover){
				recoverThread = new EvRecThreadClass(c, status_tracker);
				recoverThread.Run();
			}
			//Update Status Bar
			bar.UpdateStatBar(6);
			status_tracker.getStatus();
			
			//Check on external tools
			if(!status_tracker.CheckExternalToolStatus()){
				status_tracker.setExternalToolStatus("Complete");
			}
			//Update Status Bar
			bar.UpdateStatBar(7);
			status_tracker.getStatus();
			
			//Start indexing
			if (enableEvidenceIndexing) {
				if (enableEvidenceHashing){
					while (status_tracker.getHashStatus()) {
					SystemClass::Sleep(120000);
					status_tracker.getStatus();
					}
				}
				indexThread = new EvIdxThreadClass(c, status_tracker);
				indexThread.Run();
			}			
			//Update Status Bar
			bar.UpdateStatBar(8);
			status_tracker.getStatus();
				
			//Wait for external tools
			while(status_tracker.CheckExternalToolStatus()){
				SystemClass::Sleep(30000);
			}
			if(!status_tracker.CheckExternalToolStatus()){
				status_tracker.setExternalToolStatus("Complete");
			}
			//Update Status Bar
			bar.UpdateStatBar(9);
			status_tracker.getStatus();

			//Update Status Bar
			bar.UpdateStatBar(10);

		}
		else if (wiz == SystemClass::CANCEL && wiz == 2) {
			SystemClass::Message(SystemClass::ICONINFORMATION, "Artificial Kyle Anderson", "Triage canceled.");
			SystemClass::Exit();
		} else if (aka_path_available==false) {
			SystemClass::Message(SystemClass::ICONINFORMATION, "Artificial Kyle Anderson", "Whoa, hold up! Please rename or delete the current AKA_Export folder, then try again.");
			SystemClass::Exit();
		}

		SystemClass::Message(SystemClass::ICONINFORMATION, "Artificial Kyle Anderson", "I'm done!\n\n I think...\n\nI leave it up to you to analyze the extracted and parsed data.\n\nGood luck with the analysis!\n  --Kyle\n\nP.S. Here's what I'm seeing as the final Status:\n\n"+ status_tracker.getStatusString());
	}
	///END MAIN////

}