/*
Project: AKA Triage Suite
Sub-Project: AKA Triage Tool
Component: Encase Miscelaneous Functions  
Purpose:	This class can be used to export files to the 
			exports folder, remove empty folders and empty 
			event logs from the exports folder, and createTmpFile
			a temp file.
Supporting tool: Encase
Supporting URL: https://opentext.com
Developer: Dave Posocco

*/


class MiscClass {

	MiscClass()
	{
	}
	
	//////////Export file//////////
	void exportFile(EntryClass entry,const String &out_path, LoggingUtils log, bool allow){
		if (allow) {
			uint opts;
			EntryFileClass entryFile();
			ConnectionClass connect = LocalMachine;
			String path = out_path;
			
			log.appendLog("PROCESSING: " + " Drive: " + entry.EvidenceFile() + " Vol: " + entry.GetVolume().Name()+" File: "+entry.Name() + " began at " + log.currentTime());
			
			String username;
			String entry_path = entry.TruePath();
			entry_path.ToLower();
			
			//Get the username, if the path contains Users
			if (entry_path.Contains("\\users\\")) {
				int user_position = entry_path.Find("user",0,-1,0);
				int name_start_position = entry_path.Find("\\",user_position,-1,0)+1;
				int name_end_position = entry_path.Find("\\",name_start_position,-1,0)-1;
				username = entry_path.SubString(name_start_position, (name_end_position-name_start_position)+1);
			}

			if (entryFile.Open(entry, opts)) {
				//Build a copy of the file in the output dir
				entryFile.SetCodePage(CodePageClass::ANSI);
				LocalFileClass local();
				local.SetCodePage(CodePageClass::ANSI);
				String outFile;
				String entry_name = entry.Name();
				entry_name.ToLower();
				
				if (username != "" && (entry_name == "ntuser.dat" || entry_name == "usrclass.dat"|| entry_name.Contains("thumbcache_") || entry_name.Contains(".lnk") || entry_name.Contains("destination"))){
					path = path+username + "\\";
					if (!LocalMachine.PathExists(path)) {
						connect.CreateFolder(path);
					}
					outFile = path+entry.Name();
				} else if (entry_name == "svchost.exe" || entry_name == "explorer.exe") {
					outFile = path + entry.Parent().Name()+"---"+entry.Name()+"_";
				} else {
					outFile = path + entry.Name();
				} 
				
				if (local.Open(outFile, FileClass::WRITE)) { 
					local.WriteBuffer(entryFile);
					local.Close();
					log.appendLog("SUCCESS: " + " Drive: " + entry.EvidenceFile() + " Vol: " + entry.GetVolume().Name()+" File: "+entry.Name() + " exported at "+ log.currentTime());
				} else {
					log.appendLog("FAILURE: " + " Drive: " + entry.EvidenceFile() + " Vol: " + entry.GetVolume().Name()+" File: "+entry.Name() + " failed to export file at "+log.currentTime());
				}
			} else {
				log.appendLog("FAILURE: " + " Drive: " + entry.EvidenceFile() + " Vol: " + entry.GetVolume().Name()+" File: "+entry.Name() + " failed to open stream to file at "+log.currentTime());
			}
		}
	}
	
	//////////Cleanup by removing empty directories from the export folder//////////
	bool cleanup(const String &path) {
		bool result = false;
		//Set up command line arguments
		String cmd_args = "/C for /f \"delims=\" %d in ('dir "+path+" /s /b /ad ^| sort /r') do rd \"%d\"";
		
		//Prepare an instance of cmd.exe with arguments for TZworks prefetch parser
		ExecuteClass exec();
		exec.SetApplication("C:\\Windows\\System32\\" + "cmd.exe");
		exec.SetFolder("C:\\Windows\\System32\\");
		
		exec.SetCommandLine(cmd_args);
		exec.SetShow(false);
		
		//Execute the process and log results
		if (exec.Start(LocalMachine, -1)) {
			result = true;	
		} else {
			result = false;
		}
		return result;
	}
	
	//////////Cleanup by removing empty event logs from the eventlogs folder//////////
	bool cleanupEvtLogs(const String &path){
		bool result = false;
		//Set up command line arguments
		String cmd_args = "/C cd \"" + path + "\" & " "forfiles /M *.* /c \"cmd /C IF @fsize LSS 70000 del /f @file\"";
		
		ExecuteClass exec();
		exec.SetApplication("C:\\Windows\\System32\\" + "cmd.exe");
		exec.SetFolder("C:\\Windows\\System32\\");
		
		exec.SetCommandLine(cmd_args);
		exec.SetShow(false);
		
		//Execute the process and log results
		if (exec.Start(LocalMachine, 1000)) {
			result = true;	
		} else {
			result = false;
		}
		return result;		
	}
	
	bool createTmpFile(const String &path){
		bool result = false;
		//Set up command line arguments
		String cmd_args = "/C echo I'm preventing this folders deletion during the AKA cleanup... :) > "+path+"tmp";
		
		ExecuteClass exec();
		exec.SetApplication("C:\\Windows\\System32\\" + "cmd.exe");
		exec.SetFolder("C:\\Windows\\System32\\");
		
		exec.SetCommandLine(cmd_args);
		exec.SetShow(false);
		
		//Execute the process and log results
		if (exec.Start(LocalMachine, 1000)) {
			result = true;	
		} else {
			result = false;
		}
		return result;		
	}

}