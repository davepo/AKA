/*
Project: AKA Triage Suite
Sub-Project: AKA Triage Tool
Component: External Tool initializer
Purpose:	This class can be used to create a
			thread that initializes the external
			tool launcher.
Supporting tool: Encase
Supporting URL: https://opentext.com
Developer: Dave Posocco

*/

class ToolExecution {
	typedef String[] StringAr;
	
	static LoggingUtils log;
	
	ToolExecution(LoggingUtils L):
		log = L
	{
	}

	//Method to run the external processor, the file export and evidence path file paths are passed as arguments
	public bool runExternalToolsProcessor (const String &exportsPathsFile, const String &evidencePathsFile){
		bool result;
		ExecuteClass exec();
		
		String aka_script_path = SystemClass::ScriptPath();
		String aka_ruby_file = aka_script_path.GetFilePath() + "\\AKA_External_Processor.rb";
		String aka_ruby_launcher = aka_script_path.GetFilePath() + "\\AKA_External_Launcher.rb";
		
		String path, exe, args;
			
		path="C:\\Windows\\System32\\";
		exe="cmd.exe";
		args=" /K ruby " +
				"\""+aka_ruby_launcher+"\" " +
				"\""+"\\\""+aka_ruby_file+"\\\" "+"\" " +
				"\""+"\\\""+aka_script_path.GetFilePath()+"\\\" "+"\" " +
				"\""+"\\\""+exportsPathsFile+"\\\" "+"\" " +
				"\""+"\\\""+evidencePathsFile+"\\\" "+"\" ";
			
		exec.SetApplication(exe);
		exec.SetFolder(path);
		exec.SetCommandLine(args);
		exec.SetShow(false);

		//Execute process and log results.
		if (exec.Start(LocalMachine, 1000)) {
			result = true;
			log.appendLog("Started external tools processor. " + " Time: " + log.currentTime());		
			if (exec.Output().Contains("Finished processing") && exec.Output().Contains("Total processing time")){				
				log.appendLog("Completed external tools processor. " + " Time: " + log.currentTime());
			}
			else {
				log.appendLog("Failed to complete external tools processor. " + " Time: " + log.currentTime());
			}	
		} else {
			result = false;
			log.appendLog("Failed to start external tools processor. " + " Time: " + log.currentTime());
		}
		return result;
		
	}
	
	// Method to create the export paths file
	bool writeExportsPathFile(const String &aka_path, StringAr paths) {
		return writePathsFile(aka_path+"exportsPaths.txt", paths);
	}
	
	// Method to create the evidence paths file
	bool writeEvidencePathFile(const String &aka_path, StringAr paths) {
		return writePathsFile(aka_path+"evidencePaths.txt", paths);
	}
	
	//Method to write the paths to the paths files
	bool writePathsFile(const String &path, StringAr paths){

		LocalFileClass lf();
		lf.SetCodePage(CodePageClass::ANSI);
		
		if (lf.Open(path, FileClass::APPEND)){
			foreach(String s in paths){
				lf.WriteLine(s);
			}
			lf.Close();
			return true;
		}
		else {
			Console.WriteLine("Failed to write to file: {0}", SystemClass::LastError());
			return false;
		}		
	}

}

//Class to create a thread that runs the external tools processor
class ToolExecutionThread: ThreadClass {
	typedef String[] StringAr;
	
	static CaseClass C;
	static LoggingUtils log;
	static String aka_path;
	static StringAr export_paths;
	static StatusTrackerClass status;

	ToolExecutionThread(CaseClass c, LoggingUtils L, const String & ap, StringAr ep, StatusTrackerClass s):
		ThreadClass(),
		C = c,
		log = L,
		aka_path = ap,
		export_paths = ep,
		status = s
	{
	}
	virtual void Run() {
		HaltOnError(false);
		status.setExternalToolStatus("Enabled - Running");
		status.getStatus();
		ToolExecution execute(log);
		
		//Generates a string array containing the evidence file paths
		StringAr evidence_file_paths(0,100);
		foreach(EvidenceClass evidence_file in C.EvidenceRoot()){	
			evidence_file_paths.Add(evidence_file.PrimaryPath());
		}		
		
		//Writes the evidence file and exports file paths files.  if successful, runs the external tools processor
		if(execute.writeExportsPathFile(aka_path, export_paths) && execute.writeEvidencePathFile(aka_path, evidence_file_paths)){
			execute.runExternalToolsProcessor(aka_path+"exportsPaths.txt", aka_path+"evidencePaths.txt");
		} else {
			status.setExternalToolStatus("Enabled - Error");
			status.getStatus();
			return;
		}
		
		return;
	}
}